#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HomeCare.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HomeCare")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBloodType(BloodType instance);
    partial void UpdateBloodType(BloodType instance);
    partial void DeleteBloodType(BloodType instance);
    partial void InsertCaretaker(Caretaker instance);
    partial void UpdateCaretaker(Caretaker instance);
    partial void DeleteCaretaker(Caretaker instance);
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertHandicap(Handicap instance);
    partial void UpdateHandicap(Handicap instance);
    partial void DeleteHandicap(Handicap instance);
    partial void InsertIllness(Illness instance);
    partial void UpdateIllness(Illness instance);
    partial void DeleteIllness(Illness instance);
    partial void InsertPatientInfo(PatientInfo instance);
    partial void UpdatePatientInfo(PatientInfo instance);
    partial void DeletePatientInfo(PatientInfo instance);
    partial void InsertPatientInfo_Contact(PatientInfo_Contact instance);
    partial void UpdatePatientInfo_Contact(PatientInfo_Contact instance);
    partial void DeletePatientInfo_Contact(PatientInfo_Contact instance);
    partial void InsertPatientInfo_Handicap(PatientInfo_Handicap instance);
    partial void UpdatePatientInfo_Handicap(PatientInfo_Handicap instance);
    partial void DeletePatientInfo_Handicap(PatientInfo_Handicap instance);
    partial void InsertPatientInfo_Illne(PatientInfo_Illne instance);
    partial void UpdatePatientInfo_Illne(PatientInfo_Illne instance);
    partial void DeletePatientInfo_Illne(PatientInfo_Illne instance);
    partial void InsertPatientInfo_PersonalContact(PatientInfo_PersonalContact instance);
    partial void UpdatePatientInfo_PersonalContact(PatientInfo_PersonalContact instance);
    partial void DeletePatientInfo_PersonalContact(PatientInfo_PersonalContact instance);
    partial void InsertPersonalContact(PersonalContact instance);
    partial void UpdatePersonalContact(PersonalContact instance);
    partial void DeletePersonalContact(PersonalContact instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertTask_PatientInfo(Task_PatientInfo instance);
    partial void UpdateTask_PatientInfo(Task_PatientInfo instance);
    partial void DeleteTask_PatientInfo(Task_PatientInfo instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["HomeCareConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BloodType> BloodTypes
		{
			get
			{
				return this.GetTable<BloodType>();
			}
		}
		
		public System.Data.Linq.Table<Caretaker> Caretakers
		{
			get
			{
				return this.GetTable<Caretaker>();
			}
		}
		
		public System.Data.Linq.Table<Visit> Visits
		{
			get
			{
				return this.GetTable<Visit>();
			}
		}
		
		public System.Data.Linq.Table<Contact> Contacts
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<Handicap> Handicaps
		{
			get
			{
				return this.GetTable<Handicap>();
			}
		}
		
		public System.Data.Linq.Table<Illness> Illnesses
		{
			get
			{
				return this.GetTable<Illness>();
			}
		}
		
		public System.Data.Linq.Table<PatientInfo> PatientInfos
		{
			get
			{
				return this.GetTable<PatientInfo>();
			}
		}
		
		public System.Data.Linq.Table<PatientInfo_Contact> PatientInfo_Contacts
		{
			get
			{
				return this.GetTable<PatientInfo_Contact>();
			}
		}
		
		public System.Data.Linq.Table<PatientInfo_Handicap> PatientInfo_Handicaps
		{
			get
			{
				return this.GetTable<PatientInfo_Handicap>();
			}
		}
		
		public System.Data.Linq.Table<PatientInfo_Illne> PatientInfo_Illnes
		{
			get
			{
				return this.GetTable<PatientInfo_Illne>();
			}
		}
		
		public System.Data.Linq.Table<PatientInfo_PersonalContact> PatientInfo_PersonalContacts
		{
			get
			{
				return this.GetTable<PatientInfo_PersonalContact>();
			}
		}
		
		public System.Data.Linq.Table<PersonalContact> PersonalContacts
		{
			get
			{
				return this.GetTable<PersonalContact>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		public System.Data.Linq.Table<Task_PatientInfo> Task_PatientInfos
		{
			get
			{
				return this.GetTable<Task_PatientInfo>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BloodType")]
	public partial class BloodType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<PatientInfo> _PatientInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public BloodType()
		{
			this._PatientInfos = new EntitySet<PatientInfo>(new Action<PatientInfo>(this.attach_PatientInfos), new Action<PatientInfo>(this.detach_PatientInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BloodType_PatientInfo", Storage="_PatientInfos", ThisKey="id", OtherKey="bloodTypeId")]
		public EntitySet<PatientInfo> PatientInfos
		{
			get
			{
				return this._PatientInfos;
			}
			set
			{
				this._PatientInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PatientInfos(PatientInfo entity)
		{
			this.SendPropertyChanging();
			entity.BloodType = this;
		}
		
		private void detach_PatientInfos(PatientInfo entity)
		{
			this.SendPropertyChanging();
			entity.BloodType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Caretaker")]
	public partial class Caretaker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _user_id;
		
		private System.Nullable<System.DateTime> _date_of_employemnt;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Ondate_of_employemntChanging(System.Nullable<System.DateTime> value);
    partial void Ondate_of_employemntChanged();
    #endregion
		
		public Caretaker()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_of_employemnt", DbType="Date")]
		public System.Nullable<System.DateTime> date_of_employemnt
		{
			get
			{
				return this._date_of_employemnt;
			}
			set
			{
				if ((this._date_of_employemnt != value))
				{
					this.Ondate_of_employemntChanging(value);
					this.SendPropertyChanging();
					this._date_of_employemnt = value;
					this.SendPropertyChanged("date_of_employemnt");
					this.Ondate_of_employemntChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Caretaker", Storage="_User", ThisKey="user_id", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Caretakers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Caretakers.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Visit")]
	public partial class Visit
	{
		
		private int _id;
		
		private int _user_id;
		
		private System.Nullable<System.DateTime> _date;
		
		public Visit()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL")]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					this._user_id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this._date = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contact")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _firstname;
		
		private string _lastname;
		
		private string _email;
		
		private string _phoneNumber;
		
		private string _otherInfo;
		
		private string _jobTitle;
		
		private EntitySet<PatientInfo_Contact> _PatientInfo_Contacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnfirstnameChanging(string value);
    partial void OnfirstnameChanged();
    partial void OnlastnameChanging(string value);
    partial void OnlastnameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnphoneNumberChanging(string value);
    partial void OnphoneNumberChanged();
    partial void OnotherInfoChanging(string value);
    partial void OnotherInfoChanged();
    partial void OnjobTitleChanging(string value);
    partial void OnjobTitleChanged();
    #endregion
		
		public Contact()
		{
			this._PatientInfo_Contacts = new EntitySet<PatientInfo_Contact>(new Action<PatientInfo_Contact>(this.attach_PatientInfo_Contacts), new Action<PatientInfo_Contact>(this.detach_PatientInfo_Contacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstname", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string firstname
		{
			get
			{
				return this._firstname;
			}
			set
			{
				if ((this._firstname != value))
				{
					this.OnfirstnameChanging(value);
					this.SendPropertyChanging();
					this._firstname = value;
					this.SendPropertyChanged("firstname");
					this.OnfirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastname", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string lastname
		{
			get
			{
				return this._lastname;
			}
			set
			{
				if ((this._lastname != value))
				{
					this.OnlastnameChanging(value);
					this.SendPropertyChanging();
					this._lastname = value;
					this.SendPropertyChanged("lastname");
					this.OnlastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string phoneNumber
		{
			get
			{
				return this._phoneNumber;
			}
			set
			{
				if ((this._phoneNumber != value))
				{
					this.OnphoneNumberChanging(value);
					this.SendPropertyChanging();
					this._phoneNumber = value;
					this.SendPropertyChanged("phoneNumber");
					this.OnphoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_otherInfo", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string otherInfo
		{
			get
			{
				return this._otherInfo;
			}
			set
			{
				if ((this._otherInfo != value))
				{
					this.OnotherInfoChanging(value);
					this.SendPropertyChanging();
					this._otherInfo = value;
					this.SendPropertyChanged("otherInfo");
					this.OnotherInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_jobTitle", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string jobTitle
		{
			get
			{
				return this._jobTitle;
			}
			set
			{
				if ((this._jobTitle != value))
				{
					this.OnjobTitleChanging(value);
					this.SendPropertyChanging();
					this._jobTitle = value;
					this.SendPropertyChanged("jobTitle");
					this.OnjobTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_PatientInfo_Contact", Storage="_PatientInfo_Contacts", ThisKey="id", OtherKey="contactId")]
		public EntitySet<PatientInfo_Contact> PatientInfo_Contacts
		{
			get
			{
				return this._PatientInfo_Contacts;
			}
			set
			{
				this._PatientInfo_Contacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PatientInfo_Contacts(PatientInfo_Contact entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_PatientInfo_Contacts(PatientInfo_Contact entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Handicap")]
	public partial class Handicap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<PatientInfo_Handicap> _PatientInfo_Handicaps;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Handicap()
		{
			this._PatientInfo_Handicaps = new EntitySet<PatientInfo_Handicap>(new Action<PatientInfo_Handicap>(this.attach_PatientInfo_Handicaps), new Action<PatientInfo_Handicap>(this.detach_PatientInfo_Handicaps));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Handicap_PatientInfo_Handicap", Storage="_PatientInfo_Handicaps", ThisKey="id", OtherKey="handicapId")]
		public EntitySet<PatientInfo_Handicap> PatientInfo_Handicaps
		{
			get
			{
				return this._PatientInfo_Handicaps;
			}
			set
			{
				this._PatientInfo_Handicaps.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PatientInfo_Handicaps(PatientInfo_Handicap entity)
		{
			this.SendPropertyChanging();
			entity.Handicap = this;
		}
		
		private void detach_PatientInfo_Handicaps(PatientInfo_Handicap entity)
		{
			this.SendPropertyChanging();
			entity.Handicap = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Illness")]
	public partial class Illness : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<PatientInfo_Illne> _PatientInfo_Illnes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Illness()
		{
			this._PatientInfo_Illnes = new EntitySet<PatientInfo_Illne>(new Action<PatientInfo_Illne>(this.attach_PatientInfo_Illnes), new Action<PatientInfo_Illne>(this.detach_PatientInfo_Illnes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Illness_PatientInfo_Illne", Storage="_PatientInfo_Illnes", ThisKey="id", OtherKey="illnesId")]
		public EntitySet<PatientInfo_Illne> PatientInfo_Illnes
		{
			get
			{
				return this._PatientInfo_Illnes;
			}
			set
			{
				this._PatientInfo_Illnes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PatientInfo_Illnes(PatientInfo_Illne entity)
		{
			this.SendPropertyChanging();
			entity.Illness = this;
		}
		
		private void detach_PatientInfo_Illnes(PatientInfo_Illne entity)
		{
			this.SendPropertyChanging();
			entity.Illness = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PatientInfo")]
	public partial class PatientInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _userId;
		
		private System.Nullable<int> _bloodTypeId;
		
		private string _dislikes;
		
		private string _comments;
		
		private EntitySet<PatientInfo_Contact> _PatientInfo_Contacts;
		
		private EntitySet<PatientInfo_Handicap> _PatientInfo_Handicaps;
		
		private EntitySet<PatientInfo_Illne> _PatientInfo_Illnes;
		
		private EntitySet<PatientInfo_PersonalContact> _PatientInfo_PersonalContacts;
		
		private EntitySet<Task_PatientInfo> _Task_PatientInfos;
		
		private EntityRef<BloodType> _BloodType;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnbloodTypeIdChanging(System.Nullable<int> value);
    partial void OnbloodTypeIdChanged();
    partial void OndislikesChanging(string value);
    partial void OndislikesChanged();
    partial void OncommentsChanging(string value);
    partial void OncommentsChanged();
    #endregion
		
		public PatientInfo()
		{
			this._PatientInfo_Contacts = new EntitySet<PatientInfo_Contact>(new Action<PatientInfo_Contact>(this.attach_PatientInfo_Contacts), new Action<PatientInfo_Contact>(this.detach_PatientInfo_Contacts));
			this._PatientInfo_Handicaps = new EntitySet<PatientInfo_Handicap>(new Action<PatientInfo_Handicap>(this.attach_PatientInfo_Handicaps), new Action<PatientInfo_Handicap>(this.detach_PatientInfo_Handicaps));
			this._PatientInfo_Illnes = new EntitySet<PatientInfo_Illne>(new Action<PatientInfo_Illne>(this.attach_PatientInfo_Illnes), new Action<PatientInfo_Illne>(this.detach_PatientInfo_Illnes));
			this._PatientInfo_PersonalContacts = new EntitySet<PatientInfo_PersonalContact>(new Action<PatientInfo_PersonalContact>(this.attach_PatientInfo_PersonalContacts), new Action<PatientInfo_PersonalContact>(this.detach_PatientInfo_PersonalContacts));
			this._Task_PatientInfos = new EntitySet<Task_PatientInfo>(new Action<Task_PatientInfo>(this.attach_Task_PatientInfos), new Action<Task_PatientInfo>(this.detach_Task_PatientInfos));
			this._BloodType = default(EntityRef<BloodType>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL")]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bloodTypeId", DbType="Int")]
		public System.Nullable<int> bloodTypeId
		{
			get
			{
				return this._bloodTypeId;
			}
			set
			{
				if ((this._bloodTypeId != value))
				{
					if (this._BloodType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnbloodTypeIdChanging(value);
					this.SendPropertyChanging();
					this._bloodTypeId = value;
					this.SendPropertyChanged("bloodTypeId");
					this.OnbloodTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dislikes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string dislikes
		{
			get
			{
				return this._dislikes;
			}
			set
			{
				if ((this._dislikes != value))
				{
					this.OndislikesChanging(value);
					this.SendPropertyChanging();
					this._dislikes = value;
					this.SendPropertyChanged("dislikes");
					this.OndislikesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comments", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string comments
		{
			get
			{
				return this._comments;
			}
			set
			{
				if ((this._comments != value))
				{
					this.OncommentsChanging(value);
					this.SendPropertyChanging();
					this._comments = value;
					this.SendPropertyChanged("comments");
					this.OncommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatientInfo_PatientInfo_Contact", Storage="_PatientInfo_Contacts", ThisKey="id", OtherKey="patientId")]
		public EntitySet<PatientInfo_Contact> PatientInfo_Contacts
		{
			get
			{
				return this._PatientInfo_Contacts;
			}
			set
			{
				this._PatientInfo_Contacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatientInfo_PatientInfo_Handicap", Storage="_PatientInfo_Handicaps", ThisKey="id", OtherKey="patientId")]
		public EntitySet<PatientInfo_Handicap> PatientInfo_Handicaps
		{
			get
			{
				return this._PatientInfo_Handicaps;
			}
			set
			{
				this._PatientInfo_Handicaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatientInfo_PatientInfo_Illne", Storage="_PatientInfo_Illnes", ThisKey="id", OtherKey="patientID")]
		public EntitySet<PatientInfo_Illne> PatientInfo_Illnes
		{
			get
			{
				return this._PatientInfo_Illnes;
			}
			set
			{
				this._PatientInfo_Illnes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatientInfo_PatientInfo_PersonalContact", Storage="_PatientInfo_PersonalContacts", ThisKey="id", OtherKey="patientID")]
		public EntitySet<PatientInfo_PersonalContact> PatientInfo_PersonalContacts
		{
			get
			{
				return this._PatientInfo_PersonalContacts;
			}
			set
			{
				this._PatientInfo_PersonalContacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatientInfo_Task_PatientInfo", Storage="_Task_PatientInfos", ThisKey="id", OtherKey="patient_id")]
		public EntitySet<Task_PatientInfo> Task_PatientInfos
		{
			get
			{
				return this._Task_PatientInfos;
			}
			set
			{
				this._Task_PatientInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BloodType_PatientInfo", Storage="_BloodType", ThisKey="bloodTypeId", OtherKey="id", IsForeignKey=true)]
		public BloodType BloodType
		{
			get
			{
				return this._BloodType.Entity;
			}
			set
			{
				BloodType previousValue = this._BloodType.Entity;
				if (((previousValue != value) 
							|| (this._BloodType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BloodType.Entity = null;
						previousValue.PatientInfos.Remove(this);
					}
					this._BloodType.Entity = value;
					if ((value != null))
					{
						value.PatientInfos.Add(this);
						this._bloodTypeId = value.id;
					}
					else
					{
						this._bloodTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("BloodType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PatientInfo", Storage="_User", ThisKey="userId", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PatientInfos.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PatientInfos.Add(this);
						this._userId = value.id;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PatientInfo_Contacts(PatientInfo_Contact entity)
		{
			this.SendPropertyChanging();
			entity.PatientInfo = this;
		}
		
		private void detach_PatientInfo_Contacts(PatientInfo_Contact entity)
		{
			this.SendPropertyChanging();
			entity.PatientInfo = null;
		}
		
		private void attach_PatientInfo_Handicaps(PatientInfo_Handicap entity)
		{
			this.SendPropertyChanging();
			entity.PatientInfo = this;
		}
		
		private void detach_PatientInfo_Handicaps(PatientInfo_Handicap entity)
		{
			this.SendPropertyChanging();
			entity.PatientInfo = null;
		}
		
		private void attach_PatientInfo_Illnes(PatientInfo_Illne entity)
		{
			this.SendPropertyChanging();
			entity.PatientInfo = this;
		}
		
		private void detach_PatientInfo_Illnes(PatientInfo_Illne entity)
		{
			this.SendPropertyChanging();
			entity.PatientInfo = null;
		}
		
		private void attach_PatientInfo_PersonalContacts(PatientInfo_PersonalContact entity)
		{
			this.SendPropertyChanging();
			entity.PatientInfo = this;
		}
		
		private void detach_PatientInfo_PersonalContacts(PatientInfo_PersonalContact entity)
		{
			this.SendPropertyChanging();
			entity.PatientInfo = null;
		}
		
		private void attach_Task_PatientInfos(Task_PatientInfo entity)
		{
			this.SendPropertyChanging();
			entity.PatientInfo = this;
		}
		
		private void detach_Task_PatientInfos(Task_PatientInfo entity)
		{
			this.SendPropertyChanging();
			entity.PatientInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PatientInfo_Contact")]
	public partial class PatientInfo_Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _contactId;
		
		private int _patientId;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<PatientInfo> _PatientInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncontactIdChanging(int value);
    partial void OncontactIdChanged();
    partial void OnpatientIdChanging(int value);
    partial void OnpatientIdChanged();
    #endregion
		
		public PatientInfo_Contact()
		{
			this._Contact = default(EntityRef<Contact>);
			this._PatientInfo = default(EntityRef<PatientInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contactId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int contactId
		{
			get
			{
				return this._contactId;
			}
			set
			{
				if ((this._contactId != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncontactIdChanging(value);
					this.SendPropertyChanging();
					this._contactId = value;
					this.SendPropertyChanged("contactId");
					this.OncontactIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patientId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int patientId
		{
			get
			{
				return this._patientId;
			}
			set
			{
				if ((this._patientId != value))
				{
					if (this._PatientInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpatientIdChanging(value);
					this.SendPropertyChanging();
					this._patientId = value;
					this.SendPropertyChanged("patientId");
					this.OnpatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_PatientInfo_Contact", Storage="_Contact", ThisKey="contactId", OtherKey="id", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.PatientInfo_Contacts.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.PatientInfo_Contacts.Add(this);
						this._contactId = value.id;
					}
					else
					{
						this._contactId = default(int);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatientInfo_PatientInfo_Contact", Storage="_PatientInfo", ThisKey="patientId", OtherKey="id", IsForeignKey=true)]
		public PatientInfo PatientInfo
		{
			get
			{
				return this._PatientInfo.Entity;
			}
			set
			{
				PatientInfo previousValue = this._PatientInfo.Entity;
				if (((previousValue != value) 
							|| (this._PatientInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PatientInfo.Entity = null;
						previousValue.PatientInfo_Contacts.Remove(this);
					}
					this._PatientInfo.Entity = value;
					if ((value != null))
					{
						value.PatientInfo_Contacts.Add(this);
						this._patientId = value.id;
					}
					else
					{
						this._patientId = default(int);
					}
					this.SendPropertyChanged("PatientInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PatientInfo_Handicap")]
	public partial class PatientInfo_Handicap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _patientId;
		
		private int _handicapId;
		
		private EntityRef<Handicap> _Handicap;
		
		private EntityRef<PatientInfo> _PatientInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpatientIdChanging(int value);
    partial void OnpatientIdChanged();
    partial void OnhandicapIdChanging(int value);
    partial void OnhandicapIdChanged();
    #endregion
		
		public PatientInfo_Handicap()
		{
			this._Handicap = default(EntityRef<Handicap>);
			this._PatientInfo = default(EntityRef<PatientInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patientId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int patientId
		{
			get
			{
				return this._patientId;
			}
			set
			{
				if ((this._patientId != value))
				{
					if (this._PatientInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpatientIdChanging(value);
					this.SendPropertyChanging();
					this._patientId = value;
					this.SendPropertyChanged("patientId");
					this.OnpatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_handicapId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int handicapId
		{
			get
			{
				return this._handicapId;
			}
			set
			{
				if ((this._handicapId != value))
				{
					if (this._Handicap.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnhandicapIdChanging(value);
					this.SendPropertyChanging();
					this._handicapId = value;
					this.SendPropertyChanged("handicapId");
					this.OnhandicapIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Handicap_PatientInfo_Handicap", Storage="_Handicap", ThisKey="handicapId", OtherKey="id", IsForeignKey=true)]
		public Handicap Handicap
		{
			get
			{
				return this._Handicap.Entity;
			}
			set
			{
				Handicap previousValue = this._Handicap.Entity;
				if (((previousValue != value) 
							|| (this._Handicap.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Handicap.Entity = null;
						previousValue.PatientInfo_Handicaps.Remove(this);
					}
					this._Handicap.Entity = value;
					if ((value != null))
					{
						value.PatientInfo_Handicaps.Add(this);
						this._handicapId = value.id;
					}
					else
					{
						this._handicapId = default(int);
					}
					this.SendPropertyChanged("Handicap");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatientInfo_PatientInfo_Handicap", Storage="_PatientInfo", ThisKey="patientId", OtherKey="id", IsForeignKey=true)]
		public PatientInfo PatientInfo
		{
			get
			{
				return this._PatientInfo.Entity;
			}
			set
			{
				PatientInfo previousValue = this._PatientInfo.Entity;
				if (((previousValue != value) 
							|| (this._PatientInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PatientInfo.Entity = null;
						previousValue.PatientInfo_Handicaps.Remove(this);
					}
					this._PatientInfo.Entity = value;
					if ((value != null))
					{
						value.PatientInfo_Handicaps.Add(this);
						this._patientId = value.id;
					}
					else
					{
						this._patientId = default(int);
					}
					this.SendPropertyChanged("PatientInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PatientInfo_Illnes")]
	public partial class PatientInfo_Illne : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _patientID;
		
		private int _illnesId;
		
		private EntityRef<Illness> _Illness;
		
		private EntityRef<PatientInfo> _PatientInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpatientIDChanging(int value);
    partial void OnpatientIDChanged();
    partial void OnillnesIdChanging(int value);
    partial void OnillnesIdChanged();
    #endregion
		
		public PatientInfo_Illne()
		{
			this._Illness = default(EntityRef<Illness>);
			this._PatientInfo = default(EntityRef<PatientInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patientID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int patientID
		{
			get
			{
				return this._patientID;
			}
			set
			{
				if ((this._patientID != value))
				{
					if (this._PatientInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpatientIDChanging(value);
					this.SendPropertyChanging();
					this._patientID = value;
					this.SendPropertyChanged("patientID");
					this.OnpatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_illnesId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int illnesId
		{
			get
			{
				return this._illnesId;
			}
			set
			{
				if ((this._illnesId != value))
				{
					if (this._Illness.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnillnesIdChanging(value);
					this.SendPropertyChanging();
					this._illnesId = value;
					this.SendPropertyChanged("illnesId");
					this.OnillnesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Illness_PatientInfo_Illne", Storage="_Illness", ThisKey="illnesId", OtherKey="id", IsForeignKey=true)]
		public Illness Illness
		{
			get
			{
				return this._Illness.Entity;
			}
			set
			{
				Illness previousValue = this._Illness.Entity;
				if (((previousValue != value) 
							|| (this._Illness.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Illness.Entity = null;
						previousValue.PatientInfo_Illnes.Remove(this);
					}
					this._Illness.Entity = value;
					if ((value != null))
					{
						value.PatientInfo_Illnes.Add(this);
						this._illnesId = value.id;
					}
					else
					{
						this._illnesId = default(int);
					}
					this.SendPropertyChanged("Illness");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatientInfo_PatientInfo_Illne", Storage="_PatientInfo", ThisKey="patientID", OtherKey="id", IsForeignKey=true)]
		public PatientInfo PatientInfo
		{
			get
			{
				return this._PatientInfo.Entity;
			}
			set
			{
				PatientInfo previousValue = this._PatientInfo.Entity;
				if (((previousValue != value) 
							|| (this._PatientInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PatientInfo.Entity = null;
						previousValue.PatientInfo_Illnes.Remove(this);
					}
					this._PatientInfo.Entity = value;
					if ((value != null))
					{
						value.PatientInfo_Illnes.Add(this);
						this._patientID = value.id;
					}
					else
					{
						this._patientID = default(int);
					}
					this.SendPropertyChanged("PatientInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PatientInfo_PersonalContact")]
	public partial class PatientInfo_PersonalContact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _personalContact;
		
		private int _patientID;
		
		private EntityRef<PatientInfo> _PatientInfo;
		
		private EntityRef<PersonalContact> _PersonalContact1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpersonalContactChanging(int value);
    partial void OnpersonalContactChanged();
    partial void OnpatientIDChanging(int value);
    partial void OnpatientIDChanged();
    #endregion
		
		public PatientInfo_PersonalContact()
		{
			this._PatientInfo = default(EntityRef<PatientInfo>);
			this._PersonalContact1 = default(EntityRef<PersonalContact>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_personalContact", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int personalContact
		{
			get
			{
				return this._personalContact;
			}
			set
			{
				if ((this._personalContact != value))
				{
					if (this._PersonalContact1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpersonalContactChanging(value);
					this.SendPropertyChanging();
					this._personalContact = value;
					this.SendPropertyChanged("personalContact");
					this.OnpersonalContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patientID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int patientID
		{
			get
			{
				return this._patientID;
			}
			set
			{
				if ((this._patientID != value))
				{
					if (this._PatientInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpatientIDChanging(value);
					this.SendPropertyChanging();
					this._patientID = value;
					this.SendPropertyChanged("patientID");
					this.OnpatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatientInfo_PatientInfo_PersonalContact", Storage="_PatientInfo", ThisKey="patientID", OtherKey="id", IsForeignKey=true)]
		public PatientInfo PatientInfo
		{
			get
			{
				return this._PatientInfo.Entity;
			}
			set
			{
				PatientInfo previousValue = this._PatientInfo.Entity;
				if (((previousValue != value) 
							|| (this._PatientInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PatientInfo.Entity = null;
						previousValue.PatientInfo_PersonalContacts.Remove(this);
					}
					this._PatientInfo.Entity = value;
					if ((value != null))
					{
						value.PatientInfo_PersonalContacts.Add(this);
						this._patientID = value.id;
					}
					else
					{
						this._patientID = default(int);
					}
					this.SendPropertyChanged("PatientInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonalContact_PatientInfo_PersonalContact", Storage="_PersonalContact1", ThisKey="personalContact", OtherKey="id", IsForeignKey=true)]
		public PersonalContact PersonalContact1
		{
			get
			{
				return this._PersonalContact1.Entity;
			}
			set
			{
				PersonalContact previousValue = this._PersonalContact1.Entity;
				if (((previousValue != value) 
							|| (this._PersonalContact1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonalContact1.Entity = null;
						previousValue.PatientInfo_PersonalContacts.Remove(this);
					}
					this._PersonalContact1.Entity = value;
					if ((value != null))
					{
						value.PatientInfo_PersonalContacts.Add(this);
						this._personalContact = value.id;
					}
					else
					{
						this._personalContact = default(int);
					}
					this.SendPropertyChanged("PersonalContact1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonalContacts")]
	public partial class PersonalContact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _firstname;
		
		private string _lastname;
		
		private string _phoneNumber;
		
		private string _address;
		
		private string _email;
		
		private string _relation;
		
		private string _otherInfo;
		
		private EntitySet<PatientInfo_PersonalContact> _PatientInfo_PersonalContacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnfirstnameChanging(string value);
    partial void OnfirstnameChanged();
    partial void OnlastnameChanging(string value);
    partial void OnlastnameChanged();
    partial void OnphoneNumberChanging(string value);
    partial void OnphoneNumberChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnrelationChanging(string value);
    partial void OnrelationChanged();
    partial void OnotherInfoChanging(string value);
    partial void OnotherInfoChanged();
    #endregion
		
		public PersonalContact()
		{
			this._PatientInfo_PersonalContacts = new EntitySet<PatientInfo_PersonalContact>(new Action<PatientInfo_PersonalContact>(this.attach_PatientInfo_PersonalContacts), new Action<PatientInfo_PersonalContact>(this.detach_PatientInfo_PersonalContacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string firstname
		{
			get
			{
				return this._firstname;
			}
			set
			{
				if ((this._firstname != value))
				{
					this.OnfirstnameChanging(value);
					this.SendPropertyChanging();
					this._firstname = value;
					this.SendPropertyChanged("firstname");
					this.OnfirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string lastname
		{
			get
			{
				return this._lastname;
			}
			set
			{
				if ((this._lastname != value))
				{
					this.OnlastnameChanging(value);
					this.SendPropertyChanging();
					this._lastname = value;
					this.SendPropertyChanged("lastname");
					this.OnlastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string phoneNumber
		{
			get
			{
				return this._phoneNumber;
			}
			set
			{
				if ((this._phoneNumber != value))
				{
					this.OnphoneNumberChanging(value);
					this.SendPropertyChanging();
					this._phoneNumber = value;
					this.SendPropertyChanged("phoneNumber");
					this.OnphoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_relation", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string relation
		{
			get
			{
				return this._relation;
			}
			set
			{
				if ((this._relation != value))
				{
					this.OnrelationChanging(value);
					this.SendPropertyChanging();
					this._relation = value;
					this.SendPropertyChanged("relation");
					this.OnrelationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_otherInfo", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string otherInfo
		{
			get
			{
				return this._otherInfo;
			}
			set
			{
				if ((this._otherInfo != value))
				{
					this.OnotherInfoChanging(value);
					this.SendPropertyChanging();
					this._otherInfo = value;
					this.SendPropertyChanged("otherInfo");
					this.OnotherInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonalContact_PatientInfo_PersonalContact", Storage="_PatientInfo_PersonalContacts", ThisKey="id", OtherKey="personalContact")]
		public EntitySet<PatientInfo_PersonalContact> PatientInfo_PersonalContacts
		{
			get
			{
				return this._PatientInfo_PersonalContacts;
			}
			set
			{
				this._PatientInfo_PersonalContacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PatientInfo_PersonalContacts(PatientInfo_PersonalContact entity)
		{
			this.SendPropertyChanging();
			entity.PersonalContact1 = this;
		}
		
		private void detach_PatientInfo_PersonalContacts(PatientInfo_PersonalContact entity)
		{
			this.SendPropertyChanging();
			entity.PersonalContact1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntityRef<Role> _Role2;
		
		private EntitySet<User> _Users;
		
		private EntityRef<Role> _Role1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Role()
		{
			this._Role2 = default(EntityRef<Role>);
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Role1 = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._Role1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Role", Storage="_Role2", ThisKey="id", OtherKey="id", IsUnique=true, IsForeignKey=false)]
		public Role Role2
		{
			get
			{
				return this._Role2.Entity;
			}
			set
			{
				Role previousValue = this._Role2.Entity;
				if (((previousValue != value) 
							|| (this._Role2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role2.Entity = null;
						previousValue.Role1 = null;
					}
					this._Role2.Entity = value;
					if ((value != null))
					{
						value.Role1 = this;
					}
					this.SendPropertyChanged("Role2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Users", ThisKey="id", OtherKey="role_id")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Role", Storage="_Role1", ThisKey="id", OtherKey="id", IsForeignKey=true)]
		public Role Role1
		{
			get
			{
				return this._Role1.Entity;
			}
			set
			{
				Role previousValue = this._Role1.Entity;
				if (((previousValue != value) 
							|| (this._Role1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role1.Entity = null;
						previousValue.Role2 = null;
					}
					this._Role1.Entity = value;
					if ((value != null))
					{
						value.Role2 = this;
						this._id = value.id;
					}
					else
					{
						this._id = default(int);
					}
					this.SendPropertyChanged("Role1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Task")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<Task_PatientInfo> _Task_PatientInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Task()
		{
			this._Task_PatientInfos = new EntitySet<Task_PatientInfo>(new Action<Task_PatientInfo>(this.attach_Task_PatientInfos), new Action<Task_PatientInfo>(this.detach_Task_PatientInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_Task_PatientInfo", Storage="_Task_PatientInfos", ThisKey="id", OtherKey="task_id")]
		public EntitySet<Task_PatientInfo> Task_PatientInfos
		{
			get
			{
				return this._Task_PatientInfos;
			}
			set
			{
				this._Task_PatientInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Task_PatientInfos(Task_PatientInfo entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_Task_PatientInfos(Task_PatientInfo entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Task_PatientInfo")]
	public partial class Task_PatientInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _task_id;
		
		private int _patient_id;
		
		private EntityRef<PatientInfo> _PatientInfo;
		
		private EntityRef<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ontask_idChanging(int value);
    partial void Ontask_idChanged();
    partial void Onpatient_idChanging(int value);
    partial void Onpatient_idChanged();
    #endregion
		
		public Task_PatientInfo()
		{
			this._PatientInfo = default(EntityRef<PatientInfo>);
			this._Task = default(EntityRef<Task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_task_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int task_id
		{
			get
			{
				return this._task_id;
			}
			set
			{
				if ((this._task_id != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontask_idChanging(value);
					this.SendPropertyChanging();
					this._task_id = value;
					this.SendPropertyChanged("task_id");
					this.Ontask_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patient_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int patient_id
		{
			get
			{
				return this._patient_id;
			}
			set
			{
				if ((this._patient_id != value))
				{
					if (this._PatientInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onpatient_idChanging(value);
					this.SendPropertyChanging();
					this._patient_id = value;
					this.SendPropertyChanged("patient_id");
					this.Onpatient_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatientInfo_Task_PatientInfo", Storage="_PatientInfo", ThisKey="patient_id", OtherKey="id", IsForeignKey=true)]
		public PatientInfo PatientInfo
		{
			get
			{
				return this._PatientInfo.Entity;
			}
			set
			{
				PatientInfo previousValue = this._PatientInfo.Entity;
				if (((previousValue != value) 
							|| (this._PatientInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PatientInfo.Entity = null;
						previousValue.Task_PatientInfos.Remove(this);
					}
					this._PatientInfo.Entity = value;
					if ((value != null))
					{
						value.Task_PatientInfos.Add(this);
						this._patient_id = value.id;
					}
					else
					{
						this._patient_id = default(int);
					}
					this.SendPropertyChanged("PatientInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_Task_PatientInfo", Storage="_Task", ThisKey="task_id", OtherKey="id", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.Task_PatientInfos.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.Task_PatientInfos.Add(this);
						this._task_id = value.id;
					}
					else
					{
						this._task_id = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _firstname;
		
		private string _lastname;
		
		private string _username;
		
		private string _password;
		
		private string _address;
		
		private int _contactNumber;
		
		private int _role_id;
		
		private string _gender;
		
		private EntitySet<Caretaker> _Caretakers;
		
		private EntitySet<PatientInfo> _PatientInfos;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnfirstnameChanging(string value);
    partial void OnfirstnameChanged();
    partial void OnlastnameChanging(string value);
    partial void OnlastnameChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OncontactNumberChanging(int value);
    partial void OncontactNumberChanged();
    partial void Onrole_idChanging(int value);
    partial void Onrole_idChanged();
    partial void OngenderChanging(string value);
    partial void OngenderChanged();
    #endregion
		
		public User()
		{
			this._Caretakers = new EntitySet<Caretaker>(new Action<Caretaker>(this.attach_Caretakers), new Action<Caretaker>(this.detach_Caretakers));
			this._PatientInfos = new EntitySet<PatientInfo>(new Action<PatientInfo>(this.attach_PatientInfos), new Action<PatientInfo>(this.detach_PatientInfos));
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstname", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string firstname
		{
			get
			{
				return this._firstname;
			}
			set
			{
				if ((this._firstname != value))
				{
					this.OnfirstnameChanging(value);
					this.SendPropertyChanging();
					this._firstname = value;
					this.SendPropertyChanged("firstname");
					this.OnfirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastname", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string lastname
		{
			get
			{
				return this._lastname;
			}
			set
			{
				if ((this._lastname != value))
				{
					this.OnlastnameChanging(value);
					this.SendPropertyChanging();
					this._lastname = value;
					this.SendPropertyChanged("lastname");
					this.OnlastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contactNumber", DbType="Int NOT NULL")]
		public int contactNumber
		{
			get
			{
				return this._contactNumber;
			}
			set
			{
				if ((this._contactNumber != value))
				{
					this.OncontactNumberChanging(value);
					this.SendPropertyChanging();
					this._contactNumber = value;
					this.SendPropertyChanged("contactNumber");
					this.OncontactNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role_id", DbType="Int NOT NULL")]
		public int role_id
		{
			get
			{
				return this._role_id;
			}
			set
			{
				if ((this._role_id != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onrole_idChanging(value);
					this.SendPropertyChanging();
					this._role_id = value;
					this.SendPropertyChanged("role_id");
					this.Onrole_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string gender
		{
			get
			{
				return this._gender;
			}
			set
			{
				if ((this._gender != value))
				{
					this.OngenderChanging(value);
					this.SendPropertyChanging();
					this._gender = value;
					this.SendPropertyChanged("gender");
					this.OngenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Caretaker", Storage="_Caretakers", ThisKey="id", OtherKey="user_id")]
		public EntitySet<Caretaker> Caretakers
		{
			get
			{
				return this._Caretakers;
			}
			set
			{
				this._Caretakers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PatientInfo", Storage="_PatientInfos", ThisKey="id", OtherKey="userId")]
		public EntitySet<PatientInfo> PatientInfos
		{
			get
			{
				return this._PatientInfos;
			}
			set
			{
				this._PatientInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Role", ThisKey="role_id", OtherKey="id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._role_id = value.id;
					}
					else
					{
						this._role_id = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Caretakers(Caretaker entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Caretakers(Caretaker entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_PatientInfos(PatientInfo entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_PatientInfos(PatientInfo entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
